name: CI cache for Dev Environment

on:
  pull_request:
    paths:
      - 'infrastructure/envs/dev/**'

  workflow_dispatch:

jobs:
  dev-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.81.7

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Install Checkov & OPA
        run: |
          pip install checkov
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Set AWS credentials for LocalStack
        run: |
          echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV

      - name: Confirm LocalStack is running
        run: |
          curl -s http://localhost:4566/_localstack/health || echo "LocalStack not responding"

      - name: Set plugin cache environment variable
        run: echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> $GITHUB_ENV

      - name: Ensure plugin cache directory exists
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      - name: Check Terragrunt HCL formatting
        run: terragrunt hcl format

      - name: Validate Terragrunt configuration
        run: terragrunt hcl validate

      - name: Run Checkov on each Terragrunt module and generate report
        run: |
          CHECKOV_DIR="$GITHUB_WORKSPACE/checkov-reports"
          mkdir -p "$CHECKOV_DIR"

          for dir in infrastructure/envs/dev/*/; do
            echo "üîç Running Checkov for module: $dir"
            cd "$dir"

            TF_PLUGIN_CACHE_DIR="$TF_PLUGIN_CACHE_DIR" terragrunt init --parallelism=40
            TF_PLUGIN_CACHE_DIR="$TF_PLUGIN_CACHE_DIR" terragrunt plan -out=tf.plan
            terragrunt show -json tf.plan > tf.json

            echo "Running inbuilt Checkov policies"
            checkov --file tf.json --output json --soft-fail > checkov-report.json || echo "Checkov failed"
            if [ -s checkov-report.json ]; then
              cp checkov-report.json "$CHECKOV_DIR/$(basename "$dir")-checkov.json"
            else
              echo "‚ö†Ô∏è checkov-report.json not found or empty for $dir"
            fi

            echo "Running custom Checkov policies"
            if [ -d "$GITHUB_WORKSPACE/custom_policies" ]; then
              checkov --skip-path tf.json --skip-check CKV* -d .terragrunt-cache \
                --external-checks-dir "$GITHUB_WORKSPACE/custom_policies/terraform" \
                --output json --soft-fail > custom-checkov-report.json || echo "Custom Checkov failed"
              if [ -s custom-checkov-report.json ]; then
                cp custom-checkov-report.json "$CHECKOV_DIR/$(basename "$dir")-checkov-custom.json"
              else
                echo "‚ö†Ô∏è custom-checkov-report.json not found or empty for $dir"
              fi
            else
              echo "No custom policies found"
            fi

            cd - > /dev/null
          done

      - name: Run Infracost breakdown
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          infracost breakdown \
            --config-file=infracost/infracost-config.yaml \
            --format=json \
            --out-file=infracost-dev.json

      - name: Evaluate Infracost Rego policies with OPA
        run: |
          echo "üîç Evaluating Rego policies using OPA"
          for f in infracost/policies/**/*.rego; do
            echo "üìú Running policy: $f"
            opa eval --format=pretty \
              --data "$f" \
              --input infracost-dev.json \
              "data.infracost.deny"
          done

      - name: Fail if any Infracost policy fails
        run: |
          echo "üîç Checking for violations..."
          FAILED=0
          for f in infracost/policies/**/*.rego; do
            echo "‚è≥ Evaluating $f..."
            result=$(opa eval --format=json --data "$f" --input infracost-dev.json "data.infracost.deny" | jq '.[0].expressions[0].value | length > 0')
            if [ "$result" == "true" ]; then
              echo "‚ùå Policy violation detected in $f"
              FAILED=1
            fi
          done
          exit $FAILED

      - name: Generate Infracost HTML report
        run: |
          infracost output \
            --path=infracost-dev.json \
            --format=html \
            --out-file=infracost-report-dev.html

      - name: Generate Infracost GitHub comment JSON (Optional for future)
        run: |
          infracost output \
            --path=infracost-dev.json \
            --format=github-comment \
            --out-file=infracost-comment.json

      - name: Upload Infracost reports
        uses: actions/upload-artifact@v4
        with:
          name: infracost-reports
          path: |
            infracost-report-dev.html
            infracost-comment.json

      - name: Upload Checkov reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-reports
          path: checkov-reports/

      - name: Debug Checkov Report Contents (Optional)
        if: always()
        run: |
          echo "üìÑ Listing Checkov reports:"
          ls -R checkov-reports || echo "‚ùå No reports found"

  localstack-run:
    runs-on: self-hosted
    steps:
      - name: terratest 
        run: |
          echo "Starting Terratest"
          cd terratest 
          go test -v 